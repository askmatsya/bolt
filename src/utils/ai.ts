import { Product, Recommendation } from '../types';
import { productService } from '../services/admin';

export class AIMatsya {
  private language: 'en' | 'ta' = 'en';
  private products: Product[] = []; // Will be populated from database
  private lastFetch: number = 0;
  private fetchCooldown: number = 5000; // Reduced to 5 seconds for better responsiveness

  setLanguage(lang: 'en' | 'ta') {
    this.language = lang;
  }

  // Force refresh products (bypasses cache)
  async refreshProducts(): Promise<void> {
    console.log('ЁЯФД Forcing refresh of voice search product cache...');
    this.lastFetch = 0; // Reset cache timestamp
    await this.loadProducts();
    console.log(`тЬЕ Voice search cache refreshed with ${this.products.length} products`);
  }
  // Fetch products from database with caching
  private async loadProducts(): Promise<Product[]> {
    const now = Date.now();
    
    // Use cache if recent fetch (within cooldown period)
    if (this.products.length > 0 && (now - this.lastFetch) < this.fetchCooldown) {
      console.log(`Using cached products (${this.products.length} items)`);
      return this.products;
    }

    console.log('ЁЯФН Fetching fresh products from database...');

    try {
      // Fetch from database using the service
      const dbProducts = await productService.getAll();
      
      // Convert database products to our Product interface format
      this.products = dbProducts.map(dbProduct => ({
        id: dbProduct.id,
        name: dbProduct.name,
        category: dbProduct.categories?.name || 'Uncategorized',
        description: dbProduct.description,
        culturalSignificance: dbProduct.cultural_significance,
        price: dbProduct.price,
        priceRange: dbProduct.price_range,
        origin: dbProduct.origin,
        artisan: dbProduct.artisans?.name,
        image: dbProduct.image_url,
        tags: dbProduct.tags || [],
        occasions: dbProduct.occasions || [],
        materials: dbProduct.materials || [],
        craftTime: dbProduct.craft_time
      }));

      this.lastFetch = now;
      console.log(`тЬЕ Loaded ${this.products.length} products from database for voice search`);
      
      return this.products;
    } catch (error) {
      console.warn('Database not available, using fallback data:', error.message);
      
      // Fallback to static products if database fails
      try {
        const { sampleProducts } = await import('../data/products');
        this.products = this.convertDbProductsToProducts(sampleProducts);
        this.lastFetch = now;
        console.log(`тЪая╕П Using sample data fallback (${this.products.length} items)`);
      } catch (fallbackError) {
        console.error('Failed to load fallback products:', fallbackError);
        // Use minimal fallback data if everything fails
        this.products = this.getMinimalFallbackProducts();
      }
      
      return this.products;
    }
  }

  // Convert database products to our Product interface format
  private convertDbProductsToProducts(dbProducts: any[]): Product[] {
    return dbProducts.map(dbProduct => ({
      id: dbProduct.id,
      name: dbProduct.name,
      category: dbProduct.category || 'Uncategorized',
      description: dbProduct.description,
      culturalSignificance: dbProduct.cultural_significance || dbProduct.culturalSignificance || '',
      price: dbProduct.price,
      priceRange: dbProduct.price_range || dbProduct.priceRange || `$${dbProduct.price}`,
      origin: dbProduct.origin,
      artisan: dbProduct.artisan || undefined,
      image: dbProduct.image_url || dbProduct.image || '',
      tags: dbProduct.tags || [],
      occasions: dbProduct.occasions || [],
      materials: dbProduct.materials || [],
      craftTime: dbProduct.craft_time || dbProduct.craftTime
    }));
  }

  // Minimal fallback when everything fails
  private getMinimalFallbackProducts(): Product[] {
    return [
      {
        id: 'demo-1',
        name: 'Traditional Handcraft Item',
        category: 'Demo',
        description: 'Sample product for demonstration purposes.',
        culturalSignificance: 'Represents traditional Indian craftsmanship.',
        price: 100,
        priceRange: '$50 - $150',
        origin: 'India',
        image: 'https://images.pexels.com/photos/1545743/pexels-photo-1545743.jpeg',
        tags: ['traditional', 'handmade'],
        occasions: ['gift', 'home decor'],
        materials: ['natural materials'],
        craftTime: '1 week'
      }
    ];
  }

  private getResponse(key: string, params?: any): string {
    const responses = {
      en: {
        wedding: `Namaste! For weddings, I recommend these exquisite pieces that will make the occasion truly special. Banarasi sarees are perfect for brides, while Kundan jewelry adds royal elegance. Each piece carries centuries of tradition and craftsmanship.`,
        budget: `I've found some excellent options within your $${params?.budget} budget. All these products are authentic and come directly from artisans.`,
        saree: `Saree - the pride of Indian women! Our collection features authentic handwoven sarees from different regions. Each saree tells a story of tradition, artistry, and cultural heritage.`,
        jewelry: `Traditional Indian jewelry is not just adornment - it's a symbol of prosperity and cultural identity. Our Kundan and traditional pieces are crafted by master artisans using time-honored techniques.`,
        cultural: `Let me tell you about ${params?.productName}! ${params?.significance}\n\nThis beautiful tradition has been passed down through generations, and each piece we offer maintains these authentic practices.`,
        gift: `Gift-giving is a beautiful way to show love! These handcrafted pieces make perfect gifts - each one unique and meaningful. They carry the warmth of Indian tradition and the skill of our artisans.`,
        spice: `Indian spices - a treasure trove of flavors and aromas! Our spice collection brings authentic flavors from different regions of India. Each spice is carefully sourced and traditionally processed.`,
        newProducts: `Great news! I can see we have ${params?.count} products in our collection, including some recently added items. Let me show you what's available!`,
        noProducts: `I apologize, but I couldn't find any products matching your request at the moment. Our catalog is constantly being updated with new authentic items.`,
        default: `Namaste! I'm here to help you discover authentic Indian ethnic products. Here are some of our featured items that showcase the beauty of Indian craftsmanship. What specific type of product are you looking for?`
      },
      ta: {
        wedding: `ро╡рогроХрпНроХроорпН! родро┐ро░рпБроорогроЩрпНроХро│рпБроХрпНроХрпБ, роЗроирпНрод роЕро┤роХро╛рой рокрпКро░рпБроЯрпНроХро│рпИ роиро╛ройрпН рокро░ро┐роирпНродрпБро░рпИроХрпНроХро┐ро▒рпЗройрпН, роЕро╡рпИ роЗроирпНрод роиро┐роХро┤рпНро╡рпИ роЙрогрпНроорпИропро┐ро▓рпЗропрпЗ роЪро┐ро▒рокрпНрокро╛роХрпНроХрпБроорпН. рокройро╛ро░роЪро┐ рокрпБроЯро╡рпИроХро│рпН роорогрокрпНрокрпЖрогрпНроХро│рпБроХрпНроХрпБ роЪро░ро┐ропро╛ройро╡рпИ, роЕродрпЗ роирпЗро░родрпНродро┐ро▓рпН роХрпБроирпНродройрпН роироХрпИроХро│рпН роЕро░роЪ роирпЗро░рпНродрпНродро┐ропрпИ роЪрпЗро░рпНроХрпНроХро┐ройрпНро▒рой. роТро╡рпНро╡рпКро░рпБ рокрпКро░рпБро│рпБроорпН роирпВро▒рпНро▒ро╛рогрпНроЯрпБроХро│ро┐ройрпН рокро╛ро░роорпНрокро░ро┐ропродрпНродрпИропрпБроорпН роХрпИро╡ро┐ройрпИродрпНродро┐ро▒ройрпИропрпБроорпН роХрпКрогрпНроЯрпБро│рпНро│родрпБ.`,
        budget: `роЙроЩрпНроХро│рпН $${params?.budget} рокроЯрпНроЬрпЖроЯрпНроЯрпБроХрпНроХрпБро│рпН роЪро┐ро▓ роЪро┐ро▒роирпНрод ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ роиро╛ройрпН роХрогрпНроЯрпБрокро┐роЯро┐родрпНродрпБро│рпНро│рпЗройрпН. роЗроирпНрод роЕройрпИродрпНродрпБ рокрпКро░рпБроЯрпНроХро│рпБроорпН роЙрогрпНроорпИропро╛ройро╡рпИ рооро▒рпНро▒рпБроорпН роирпЗро░роЯро┐ропро╛роХ роХрпИро╡ро┐ройрпИроЮро░рпНроХро│ро┐роЯрооро┐ро░рпБроирпНродрпБ ро╡ро░рпБроХро┐ройрпНро▒рой.`,
        saree: `рокрпБроЯро╡рпИ - роЗроирпНродро┐роп рокрпЖрогрпНроХро│ро┐ройрпН рокрпЖро░рпБроорпИ! роОроЩрпНроХро│рпН родрпКроХрпБрокрпНрокро┐ро▓рпН рокро▓рпНро╡рпЗро▒рпБ рокроХрпБродро┐роХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ роЙрогрпНроорпИропро╛рой роХрпИродрпНродро▒ро┐ рокрпБроЯро╡рпИроХро│рпН роЙро│рпНро│рой. роТро╡рпНро╡рпКро░рпБ рокрпБроЯро╡рпИропрпБроорпН рокро╛ро░роорпНрокро░ро┐ропроорпН, роХро▓рпИ рооро▒рпНро▒рпБроорпН роХро▓ро╛роЪрпНроЪро╛ро░ рокро╛ро░роорпНрокро░ро┐ропродрпНродро┐ройрпН роХродрпИропрпИроЪрпН роЪрпКро▓рпНроХро┐ро▒родрпБ.`,
        jewelry: `рокро╛ро░роорпНрокро░ро┐роп роЗроирпНродро┐роп роироХрпИроХро│рпН ро╡рпЖро▒рпБроорпН роЕро▓роЩрпНроХро╛ро░роорпН роЕро▓рпНро▓ - роЕродрпБ роЪрпЖро┤ро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН роХро▓ро╛роЪрпНроЪро╛ро░ роЕроЯрпИропро╛ро│родрпНродро┐ройрпН роЪро┐ройрпНройроорпН. роОроЩрпНроХро│рпН роХрпБроирпНродройрпН рооро▒рпНро▒рпБроорпН рокро╛ро░роорпНрокро░ро┐роп рокрпКро░рпБроЯрпНроХро│рпН роХро╛ро▓роЩрпНроХро╛ро▓рооро╛роХ роХроЯрпИрокро┐роЯро┐роХрпНроХрокрпНрокроЯрпБроорпН роирпБроЯрпНрокроЩрпНроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ родро▓рпИроЪро┐ро▒роирпНрод роХрпИро╡ро┐ройрпИроЮро░рпНроХро│ро╛ро▓рпН ро╡роЯро┐ро╡роорпИроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│рой.`,
        cultural: `${params?.productName} рокро▒рпНро▒ро┐ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБроЪрпН роЪрпКро▓рпНроХро┐ро▒рпЗройрпН! ${params?.significance}\n\nроЗроирпНрод роЕро┤роХро╛рой рокро╛ро░роорпНрокро░ро┐ропроорпН родро▓рпИроорпБро▒рпИроХро│ро╛роХ роХроЯродрпНродрокрпНрокроЯрпНроЯрпБ ро╡ро░рпБроХро┐ро▒родрпБ, рооро▒рпНро▒рпБроорпН роиро╛роЩрпНроХро│рпН ро╡ро┤роЩрпНроХрпБроорпН роТро╡рпНро╡рпКро░рпБ рокрпКро░рпБро│рпБроорпН роЗроирпНрод роЙрогрпНроорпИропро╛рой роироЯрпИроорпБро▒рпИроХро│рпИ рокро░ро╛рооро░ро┐роХрпНроХро┐ро▒родрпБ.`,
        gift: `рокро░ро┐роЪрпБ ро╡ро┤роЩрпНроХрпБро╡родрпБ роЕройрпНрокрпИроХрпН роХро╛роЯрпНроЯрпБроорпН роЕро┤роХро╛рой ро╡ро┤ро┐! роЗроирпНрод роХрпИро╡ро┐ройрпИрокрпН рокрпКро░рпБроЯрпНроХро│рпН роЪро░ро┐ропро╛рой рокро░ро┐роЪрпБроХро│ро╛роХ роЕроорпИроХро┐ройрпНро▒рой - роТро╡рпНро╡рпКройрпНро▒рпБроорпН родройро┐родрпНродрпБро╡рооро╛ройродрпБ рооро▒рпНро▒рпБроорпН роЕро░рпНродрпНродроорпБро│рпНро│родрпБ. роЕро╡рпИ роЗроирпНродро┐роп рокро╛ро░роорпНрокро░ро┐ропродрпНродро┐ройрпН роЕро░ро╡рогрпИрокрпНрокрпИропрпБроорпН роОроЩрпНроХро│рпН роХрпИро╡ро┐ройрпИроЮро░рпНроХро│ро┐ройрпН родро┐ро▒роорпИропрпИропрпБроорпН роХрпКрогрпНроЯрпБро│рпНро│рой.`,
        spice: `роЗроирпНродро┐роп роороЪро╛ро▓ро╛роХрпНроХро│рпН - роЪрпБро╡рпИроХро│рпН рооро▒рпНро▒рпБроорпН роиро▒рпБроорогроЩрпНроХро│ро┐ройрпН рокрпКроХрпНроХро┐ро╖роорпН! роОроЩрпНроХро│рпН роороЪро╛ро▓ро╛ родрпКроХрпБрокрпНрокрпБ роЗроирпНродро┐ропро╛ро╡ро┐ройрпН рокро▓рпНро╡рпЗро▒рпБ рокроХрпБродро┐роХро│ро┐ро▓ро┐ро░рпБроирпНродрпБ роЙрогрпНроорпИропро╛рой роЪрпБро╡рпИроХро│рпИроХрпН роХрпКрогрпНроЯрпБ ро╡ро░рпБроХро┐ро▒родрпБ. роТро╡рпНро╡рпКро░рпБ роороЪро╛ро▓ро╛ро╡рпБроорпН роХро╡ройрооро╛роХ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯрпБ рокро╛ро░роорпНрокро░ро┐ропрооро╛роХ роЪрпЖропро▓ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ.`,
        newProducts: `роиро▓рпНро▓ роЪрпЖропрпНродро┐! роОроЩрпНроХро│рпН родрпКроХрпБрокрпНрокро┐ро▓рпН ${params?.count} рокрпКро░рпБроЯрпНроХро│рпН роЙро│рпНро│рой роОройрпНрокродрпИ роиро╛ройрпН рокро╛ро░рпНроХрпНроХ роорпБроЯро┐роХро┐ро▒родрпБ, роЕродро┐ро▓рпН роЪроорпАрокродрпНродро┐ро▓рпН роЪрпЗро░рпНроХрпНроХрокрпНрокроЯрпНроЯ роЪро┐ро▓ рокрпКро░рпБроЯрпНроХро│рпБроорпН роЕроЯроЩрпНроХрпБроорпН. роХро┐роЯрпИроХрпНроХрпБроорпН рокрпКро░рпБроЯрпНроХро│рпИ роЙроЩрпНроХро│рпБроХрпНроХрпБроХрпН роХро╛роЯрпНроЯрпБроХро┐ро▒рпЗройрпН!`,
        noProducts: `рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЙроЩрпНроХро│рпН роХрпЛро░ро┐роХрпНроХрпИроХрпНроХрпБ рокрпКро░рпБроирпНродрпБроорпН роОроирпНрод рокрпКро░рпБроЯрпНроХро│рпИропрпБроорпН роЗроирпНрод роирпЗро░родрпНродро┐ро▓рпН роОройрпНройро╛ро▓рпН роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роОроЩрпНроХро│рпН рокроЯрпНроЯро┐ропро▓рпН родрпКроЯро░рпНроирпНродрпБ рокрпБродро┐роп роЙрогрпНроорпИропро╛рой рокрпКро░рпБроЯрпНроХро│рпБроЯройрпН рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ.`,
        default: `ро╡рогроХрпНроХроорпН! роЙрогрпНроорпИропро╛рой роЗроирпНродро┐роп рокро╛ро░роорпНрокро░ро┐роп рокрпКро░рпБроЯрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп роиро╛ройрпН роЗроЩрпНроХрпЗ роЙродро╡ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН. роЗроирпНродро┐роп роХрпИро╡ро┐ройрпИродрпНродро┐ро▒ройро┐ройрпН роЕро┤роХрпИроХрпН роХро╛роЯрпНроЯрпБроорпН роОроЩрпНроХро│рпН роЪро┐ро▒рокрпНрокрпБ рокрпКро░рпБроЯрпНроХро│ро┐ро▓рпН роЪро┐ро▓ роЗроЩрпНроХрпЗ роЙро│рпНро│рой. роирпАроЩрпНроХро│рпН роОроирпНрод роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ ро╡роХрпИ рокрпКро░рпБро│рпИродрпН родрпЗроЯрпБроХро┐ро▒рпАро░рпНроХро│рпН?`
      }
    };

    return responses[this.language][key] || responses.en[key];
  }

  async processVoiceInput(input: string): Promise<{ response: string; products: Product[]; type: 'text' | 'products' | 'cultural' | 'order' }> {
    const lowerInput = input.toLowerCase();
    
    // Load fresh products from database
    const availableProducts = await this.loadProducts();
    
    // Detect language from input
    if (input.includes('родро┐ро░рпБроорог') || input.includes('рокрпБроЯро╡рпИ') || input.includes('роироХрпИ') || input.includes('роороЪро╛ро▓ро╛')) {
      this.language = 'ta';
    }
    
    // Wedding/Bridal queries (English and Tamil)
    if (lowerInput.includes('wedding') || lowerInput.includes('bridal') || lowerInput.includes('marriage') || 
        lowerInput.includes('родро┐ро░рпБроорог') || lowerInput.includes('роХро▓рпНропро╛рог')) {
      const weddingProducts = availableProducts.filter(p => 
        p.occasions.includes('wedding') || p.tags.includes('bridal')
      );
      
      return {
        response: this.getResponse('wedding'),
        products: weddingProducts,
        type: 'products'
      };
    }

    // Budget-based queries
    const budgetMatch = lowerInput.match(/under (\d+)|below (\d+)|less than (\d+)|(\d+) rupees|тВ╣(\d+)|(\d+) ро░рпВрокро╛ропрпН|\$(\d+)|(\d+) dollars?/);
    if (budgetMatch) {
      const budget = parseInt(budgetMatch[1] || budgetMatch[2] || budgetMatch[3] || budgetMatch[4] || budgetMatch[5] || budgetMatch[6] || budgetMatch[7] || budgetMatch[8]);
      const budgetProducts = availableProducts.filter(p => p.price <= budget);
      
      return {
        response: this.getResponse('budget', { budget }),
        products: budgetProducts.slice(0, 6), // Show more results
        type: 'products'
      };
    }

    // Category-specific queries (English and Tamil)
    if (lowerInput.includes('saree') || lowerInput.includes('рокрпБроЯро╡рпИ')) {
      const sarees = availableProducts.filter(p => 
        p.category.toLowerCase().includes('saree') || 
        p.name.toLowerCase().includes('saree') ||
        p.tags.some(tag => tag.toLowerCase().includes('saree'))
      );
      return {
        response: this.getResponse('saree'),
        products: sarees,
        type: 'products'
      };
    }

    if (lowerInput.includes('jewelry') || lowerInput.includes('jewellery') || lowerInput.includes('роироХрпИ')) {
      const jewelry = availableProducts.filter(p => 
        p.category.toLowerCase().includes('jewelry') ||
        p.name.toLowerCase().includes('jewelry') ||
        p.tags.some(tag => tag.toLowerCase().includes('jewelry'))
      );
      return {
        response: this.getResponse('jewelry'),
        products: jewelry,
        type: 'products'
      };
    }

    // Cultural learning queries (English and Tamil)
    if (lowerInput.includes('learn') || lowerInput.includes('about') || lowerInput.includes('culture') || 
        lowerInput.includes('story') || lowerInput.includes('history') || lowerInput.includes('роХро▓ро╛роЪрпНроЪро╛ро░') || 
        lowerInput.includes('роХродрпИ') || lowerInput.includes('ро╡ро░ро▓ро╛ро▒рпБ')) {
      const culturalProduct = availableProducts[Math.floor(Math.random() * availableProducts.length)];
      
      if (culturalProduct) {
        return {
          response: this.getResponse('cultural', { 
            productName: culturalProduct.name, 
            significance: culturalProduct.culturalSignificance 
          }),
          products: [culturalProduct],
          type: 'cultural'
        };
      }
    }

    // Gift queries (English and Tamil)
    if (lowerInput.includes('gift') || lowerInput.includes('present') || lowerInput.includes('рокро░ро┐роЪрпБ')) {
      const giftProducts = availableProducts.filter(p => 
        p.occasions.includes('gift') || p.tags.includes('gift')
      ).slice(0, 4);
      
      return {
        response: this.getResponse('gift'),
        products: giftProducts,
        type: 'products'
      };
    }

    // Spice queries (English and Tamil)
    if (lowerInput.includes('spice') || lowerInput.includes('masala') || lowerInput.includes('cooking') || 
        lowerInput.includes('роороЪро╛ро▓ро╛') || lowerInput.includes('роЪроорпИропро▓рпН')) {
      const spiceProducts = availableProducts.filter(p => 
        p.category.toLowerCase().includes('spice') ||
        p.name.toLowerCase().includes('spice') ||
        p.tags.some(tag => tag.toLowerCase().includes('spice'))
      );
      return {
        response: this.getResponse('spice'),
        products: spiceProducts,
        type: 'products'
      };
    }

    // Search for specific product names or keywords
    const searchTerms = lowerInput.split(' ').filter(word => word.length > 2);
    let matchingProducts: Product[] = [];
    
    for (const term of searchTerms) {
      const matches = availableProducts.filter(p => 
        p.name.toLowerCase().includes(term) ||
        p.description.toLowerCase().includes(term) ||
        p.origin.toLowerCase().includes(term) ||
        p.tags.some(tag => tag.toLowerCase().includes(term)) ||
        p.materials.some(material => material.toLowerCase().includes(term))
      );
      matchingProducts = [...matchingProducts, ...matches];
    }

    // Remove duplicates
    matchingProducts = matchingProducts.filter((product, index, self) => 
      index === self.findIndex(p => p.id === product.id)
    );

    if (matchingProducts.length > 0) {
      return {
        response: this.getResponse('newProducts', { count: availableProducts.length }),
        products: matchingProducts.slice(0, 6),
        type: 'products'
      };
    }

    // Default response with fresh products
    if (availableProducts.length === 0) {
      return {
        response: this.getResponse('noProducts'),
        products: [],
        type: 'products'
      };
    }

    const randomProducts = availableProducts.sort(() => 0.5 - Math.random()).slice(0, 4);
    return {
      response: this.getResponse('newProducts', { count: availableProducts.length }),
      products: randomProducts,
      type: 'products'
    };
  }

  async getRecommendations(preferences: { budget?: number; occasion?: string; category?: string }): Promise<Recommendation> {
    const availableProducts = await this.loadProducts();
    let filtered = availableProducts;

    if (preferences.budget) {
      filtered = filtered.filter(p => p.price <= preferences.budget);
    }

    if (preferences.occasion) {
      filtered = filtered.filter(p => p.occasions.includes(preferences.occasion.toLowerCase()));
    }

    if (preferences.category) {
      filtered = filtered.filter(p => p.category.toLowerCase().includes(preferences.category.toLowerCase()));
    }

    const recommended = filtered.slice(0, 6); // Show more recommendations
    
    return {
      products: recommended,
      reason: this.language === 'ta' 
        ? `роЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЙроЩрпНроХро│рпН родрпЗро╡рпИроХро│рпБроХрпНроХрпБ роЪро░ро┐ропро╛роХ рокрпКро░рпБроирпНродрпБроорпН роЗроирпНрод роЙрогрпНроорпИропро╛рой рокрпКро░рпБроЯрпНроХро│рпИ роиро╛ройрпН родрпЗро░рпНроирпНродрпЖроЯрпБродрпНродрпБро│рпНро│рпЗройрпН.`
        : `Based on your preferences, I've selected these authentic pieces that perfectly match your needs.`,
      culturalContext: recommended.length > 0 ? recommended[0].culturalSignificance : undefined
    };
  }

  simulateVoiceProcessing(): Promise<void> {
    return new Promise(resolve => {
      setTimeout(resolve, 1500 + Math.random() * 1000);
    });
  }

}